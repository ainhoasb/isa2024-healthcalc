---- REFACTORIZACIÓN 1 : Enumerado Gender --------------------------------------------
-Bad smell: Primitive Obsession

-Refactorings aplicados: Replace Primitive with Enumeration  (Reemplazar Primitivo por Enumeración)

-Categoría: attribute refactoring

-Descripción: Se ha cambiado el atributo 'gender' de tipo char a un enum con los valores Female y Male. Esto mejora la claridad y la seguridad del código, ya que ahora gender tiene un conjunto finito y explícito de valores posibles en lugar de depender de un carácter, lo que reduce la posibilidad de errores y hace que el código sea más legible y mantenible.

-Cambios manuales:
	-Creación de Enum Gender.
	-Cambiar el atributo gender de char a Gender.
	-Cambiar parámetros válidos de 'm' o 'w' a 'FEMALE' y ' MALE'.
	-Cambiar 'm' por Gender.MALE
	-Cambiar 'w' por Gender.FEMALE
	-Modificar los test para que comprueben que se lanza la excepción si no es 'FEMALE' o' MALE'
	-Cambiar getGenero() de la CalcVista para que devuelva Gender.MALE o Gender.FEMALE.

	-En total por la refactorización se ha modificado 1 enum, 1 interfaz y 6 clases


---- REFACTORIZACIÓN 2 : Interfaz Person -----------------------------------------------
-Bad smell: Data Clumps

-Refactorings aplicados: Introduce Parameter Object (Introducir Objeto Parámetro)

-Categoría: class refactoring

-Descripción: Se ha creado la interfaz Person y la implementación de esa interfaz PersonImpl para poder crear un objeto con los atributos peso, altura, género y edad. Para poder encapsular todos estos atributos en un solo objeto. Los métodos que tenían todos esos atributos como parámatros ahora tienen un único parámetro. Esta refactorización mejora la legibilidad y mantenibilidad del código al reducir la longitud de las listas de parámetros y agrupar datos relacionados en una sola clase.

-Cambios manuales: 
	-Creación de la interfaz Person y la clase PersonImpl para implementar Person.
	-Cambiar los parámetros de los métodos idealWeight() y basalMetabolicRate() ahora reciben un objeto Person.
	-Extraer los atributos de Person para realizar los cálculos en los métodos idealWeight() y basalMetabolicRate()

	-En total por la refactorización se ha modificado 2 interfaces y 6 clases 


---- REFACTORIZACIÓN 3 : Interfaz CardiovascularMetrics y MetabolicMetrics -------------
-Bad smell: Large/God Class

-Refactorings aplicados: Extract Interface

-Categoría: class refactoring

-Descripción: La interfaz HealthCalc ha sido dividida en dos interfaces más específicas: CardiovascularMetrics y MetabolicMetrics. Estas interfaces ahora separan los métodos relacionados con las métricas cardiovasculares y metabólicas, respectivamente, mejorando la cohesión y facilitando la mantenibilidad del código. La implementación original en HealthCalcImpl ha sido ajustada para implementar las nuevas interfaces.

-Cambios manuales:
	-Creación de las interfaces CardiovascularMetrics y MetabolicMetrics.
	-Cambiar de float a double los resultados de los métodos idealWeight() y basalMetabolicRate().
	-Cambiar el nombre del método idealWeight() a getIdealBodyWeight().

	-En total por la refactorización se ha modificado 2 interfaces y 6 clases 
	





